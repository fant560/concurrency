package chapter11;

public class Documentation {


    // блокирующая - ждет перед вставкой/удалением элемента, если в текущий момент невозможно
    // неблокирующая - не ждет, но может вернуть null, если ресурс занят

    // ConcurrentLinkedDeque - неблокирующая, позволяет вставлять элементы в начало и конец
    // LinkedBlockingQueue - блокирующая, вставка в начало и конец
    // ConcurrentLinkedQueue - неблокирующий дек, позволяет вставлять элементы в начало и забирать с конца
    // ArrayBlockingQueue - блокирующая очередь фиксированного размера
    // LinkedBlockingQueue - блокирующая очередь, вставка в конец, извлечение из начала
    // DelayQueue -  LinkedBlockingQueue, но элементы должны реализовывать Delayed
    // LinkedTransferQueue - producer/consumer проблема
    // PriorityBlockingQueue - приоритетная блокирующая очередь
    // SynchronousQueue - блокирующая очередь, где каждая вставка ждет удаление во всех потоках
    // ConcurrentHashMap - неблокирующая  хэш-мапа
    // ConcurrentSkipListMap - неблокирующая мапа, отсортированная по ключам


    // при ленивой инициализации многопоточный код может создать более одного экземпляра объекта!!
    // с другой стороны, ленивая инициализация экономит память
    // можно использовать статику, для решения этой проблемы

    // ForkJoinPool выгоднее по производительности чем экзекуторы(почти в 10 раз!!)

    // не стоит использовать блокирующие операции(ввод пользователя в консоли) внутри критических секций!!
    // параллельные стримы сравнимы по скорости с форк/джойн, но экономят время на наборе кода

    // использовать паттерны для разработки многопоточных приложений
    // тред локал переменные в приоритете над блоками синхронизации
}
